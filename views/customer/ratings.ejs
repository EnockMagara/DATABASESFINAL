<h1>Customer Dashboard</h1>

<!-- Section to display booked flights -->
<h2>My Flights</h2>
<ul>
    <% tickets.forEach(ticket => { %>
        <li>
            Flight: <%= ticket.flight_number %> - <%= ticket.Flight.departure_airport %> to <%= ticket.Flight.arrival_airport %>
            on <%= new Date(ticket.departure_datetime).toLocaleString() %>
        </li>
    <% }) %>
</ul>

<!-- Form to give feedback -->
<h2>Give Feedback</h2>
<form id="giveFeedbackForm">
    <label for="flight_number">Flight Number:</label>
    <input type="text" id="flight_number" name="flight_number" required>

    <label for="departure_datetime">Departure Date & Time:</label>
    <input type="datetime-local" id="departure_datetime" name="departure_datetime" required>

    <label for="rating">Rating:</label>
    <input type="number" id="rating" name="rating" min="1" max="5" required>

    <label for="comments">Comments:</label>
    <textarea id="comments" name="comments"></textarea>

    <button type="submit">Submit Feedback</button>
</form>
<div id="feedbackResult"></div>

<!-- Form to cancel trip -->
<h2>Cancel Trip</h2>
<form id="cancelTripForm">
    <label for="ticket_id">Ticket ID:</label>
    <input type="text" id="ticket_id" name="ticket_id" required>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>

    <button type="submit">Cancel Trip</button>
</form>
<div id="cancelResult"></div>

<script>
document.getElementById('giveFeedbackForm').addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent the default form submission
    const formData = new FormData(this); // Create a FormData object from the form
    fetch('/customer/give-feedback', {
        method: 'POST', // Use POST method to send data
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded' // Set the content type for the request
        },
        body: new URLSearchParams(formData) // Convert form data to URL-encoded string
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok'); // Throw an error if response is not ok
        }
        return response.json(); // Parse the response as JSON
    })
    .then(data => {
        // Check if the message is present in the response
        document.getElementById('feedbackResult').innerText = data.message || 'Feedback submitted successfully!';
    })
    .catch(error => {
        // Log the error and display a user-friendly message
        console.error('Error:', error);
        document.getElementById('feedbackResult').innerText = 'An error occurred while submitting feedback.';
    });
});

document.getElementById('cancelTripForm').addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent the default form submission
    const formData = new FormData(this); // Create a FormData object from the form
    fetch('/customer/cancel-trip', {
        method: 'POST', // Use POST method to send data
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded' // Set the content type for the request
        },
        body: new URLSearchParams(formData) // Convert form data to URL-encoded string
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok'); // Throw an error if response is not ok
        }
        return response.json(); // Parse the response as JSON
    })
    .then(data => {
        // Check if the message is present in the response
        document.getElementById('cancelResult').innerText = data.message || 'Trip cancelled successfully!';
    })
    .catch(error => {
        // Log the error and display a user-friendly message
        console.error('Error:', error);
        document.getElementById('cancelResult').innerText = 'An error occurred while cancelling the trip.';
    });
});
</script>
